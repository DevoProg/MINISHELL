
COMPOSITION DU TRAVAIL A FOURNIR
______________________________________________________

DEMANDES SPECIFIQUES POUR LA MANDATORY PART ( [X] si realisation OK )

- Afficher un prompt durant l'attente d'une nouvelle commande				[]
- Avoir un historique fonctionnel.							[]
- Chercher un lancer le bon executable (basé sur la var PATH ou en utilisant		[]
  un chemin relatif ou absolut)
- Ne pas utiliser plus d'une variable globale. (utilité a savoir expliquer)		[]
- Ne pas interpréter les quotes non fermés ou les charactères spéciaux qui ne		[]
  sont pas demandés par le sujet tel que "\" ou ";".
- Savoir gérer "'" qui devrait empécher le shell d'interprèter les meta-characteres     []
  dans les entrées recues entre " ".
- Savoir gérer " qui devrait empècher le shell d'interprèter les meta-characteres	[]
  dans les entrées recues entre " " exepté pour les "$".
  
- Implémenter les redirections :	- <  doit rediriger l'input			[]
                                        - >  doit rediriger l'output			[]
                                        - << doit etre donné a un délimiteur, ensuite 	[]
                                             lire l'input jusqu'a ce qu'une ligne 
                                             contiennant le délimiteur est trouvé sans
                                             pour autant actualiser l'historique.
                                        - >> doit rediriger l'output en mode ajout.	[]

- Implémenter les PIPES ( | ). L'output de chaque commande dans la pipeline est		[] 
  connecté a l'input de la commande suivante via le pipe.
- Gérer les variables d'environnement ($ suivit d'une suite de characteres) qui doivent	[]
  ramener a leur valeurs.
- Gérer "$?" qui doit ramener a l'exit status de la plus récente pipeline exécutée	[]
  en premier plan.
- Gérer "ctrl-C", "ctrl-D", "Ctrl-\". (Comportement comme en bash)	            [][][]

- En mode interactif :		- "ctrl-C" affiche un new prompt sur une nouvelle ligne	[]
                                - "ctrl-D" permet d'exit le shell.			[]
                                - "ctrl-\" ne fait rien.				[]
                                
- Le shell doit implémenter les intégrations suivantes : - "echo" avec option -n	[]
                                                         - "cd" avec juste un chemin	[]
                                                           relatif ou absolut.
                                                         - "pwd" sans options.		[]
                                                         - "export" sans options.	[]
                                                         - "unset" sans options.	[]
                                                         - "env" sans option ou arg.	[]
                                                         - "exit" sans options.		[]
                                                         
- La fonction "readline()" peut causer des leaks. Cependant le code du projet ne peut 	[]
  pas avoir un seul leaks !
                                     
_____________________________________________________

TRAVAIL A FOURNIR POUR LA PARTIE BONUS

- Gérer "&&" et "||" avec les parenthese pour les priorités				[]
- Wildcards * devrait fonctionner pour le répertoire ou il se trouve.			[] 
                       
_____________________________________________________

ELEMENTS IMPORTANTS A IMPLEMENTER DANS LE CODE

LOOP DE RECUPERATION : Boucle qui recupere tt entrée ustilisateur dans le programme afin de formaterµ
                       Et stocker les différentes commandes. (il y a 4 facon de lance le shell ! 1) sh file_name, 
                       2) ./file_name, 3) lancer commandes directement et 4) mettre terminal en mode shell)

LE LEXEUR           : Recupère les characteres en input et place les characteres ensemble
(analyseur lexical)   pour former des mots appelés "token". Le parser se chargera de process
(= partie du parser)  les tokens en accord avec une grammaire et construira la table des
                      commandes.

LE PARSER : composant logiciel servant a lire les lignes de commandes tels que "ls -al" et 
            a les placer dans une structure de données appellée "Table des commandes" qui 
            va se charger de stocker les commandes qui seront éxécutés. Composé du "lexical
            analyser" qui prend les characteres en input et les rassemble en "tokens" et d'un
            "parser" qui process les tokens accordement a une grammaire et construit la table
            des commandes.
            
L'EXPANDEUR : ??

L'EXECUTEUR : Composant logiciel qui recupère la table des commandes générée par le parser et 
	      qui, pour chaque SimpleCommand dans la liste, va créer un nouveau processus.
	      Il créera également si nécessaire des pipes afin de communiquer l'ouput de l'un
	      des processus a l'input du suivant. En plus de cela, il redirigera l'input 
	      standard, l'ouput standard et la sortie erreur standard si il n'y a aucune 
	      redirection.
	 
	      EXEMPLE avec une commande type [A|B|C|D] : 
	      
	      --> A|B|C|D > outfile < infile 2> err_file
	      
	      Si il y a une redirection tel que " < infile" detectée par le parser, l'input de la
	      premiere SimpleCommand A est redirigée depuis "infile".
	      Si il y a une redirection d'output tel que " > outfile", cela redirige l'output de 
	      la derniere SimpleCommand (D) vers outfile.  
	      
SHELL SUBSTYSTEMS : Sub-systems qui complète le shell tel que : les variables d'environnements, wildcards
                    et subshells.
_____________________________________________________




